{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","Algorithms/dijkstra.js","Algorithms/astar.js","Algorithms/getDistance.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","astar","updateNeighbors","currentClosest","index","i","splice","updateNode","targetNode","nodeOne","nodeTwo","currentCoordinates","split","targetCoordinates","x1","parseInt","y1","x2","y2","console","log","direction","getDistance","distanceToCompare","getNeighbors","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","setTimeout","animateShortestPath","document","getElementById","animateDijkstra","animateAstar","onClick","visualizeDijkstra","visualizeAstar","disabled","window","location","reload","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.366aa230.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  let visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  let unvisitedNodes = getAllNodes(grid);\r\n  while (unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    let closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  let unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (let neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  let neighbors = [];\r\n  let { col, row } = node;\r\n  if (row > 0) {\r\n    neighbors.push(grid[row - 1][col]);\r\n  }\r\n  if (row < grid.length - 1) {\r\n    neighbors.push(grid[row + 1][col]);\r\n  }\r\n  if (col > 0) {\r\n    neighbors.push(grid[row][col - 1]);\r\n  }\r\n  if (col < grid[0].length - 1) {\r\n    neighbors.push(grid[row][col + 1]);\r\n  }\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  let nodes = [];\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import { getDistance } from \"./getDistance\";\r\n\r\nexport function astar(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  let unvisitedNodes = getAllNodes(grid);\r\n  while (unvisitedNodes.length) {\r\n    // sortNodesByDistance(unvisitedNodes);\r\n\r\n    let currentNode = closestNode(unvisitedNodes);\r\n    // let closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    currentNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateNeighbors(closestNode, grid);\r\n  }\r\n}\r\nfunction closestNode(unvisitedNodes) {\r\n  let currentClosest, index;\r\n  for (let i = 0; i < unvisitedNodes.length; i++) {\r\n    if (\r\n      !currentClosest ||\r\n      currentClosest.distance > unvisitedNodes[i].distance\r\n    ) {\r\n      currentClosest = unvisitedNodes[i];\r\n      index = i;\r\n    } else if (currentClosest.distance === unvisitedNodes[i].distance) {\r\n      currentClosest = unvisitedNodes[i];\r\n      index = i;\r\n    }\r\n  }\r\n  unvisitedNodes.splice(index, 1);\r\n  return currentClosest;\r\n}\r\n\r\n// function sortNodesByDistance(unvisitedNodes) {\r\n//   unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n// }\r\n\r\nfunction getAllNodes(grid) {\r\n  let nodes = [];\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\nfunction updateNode(currentNode, targetNode) {\r\n  let distance = getDistance(currentNode, targetNode);\r\n  let distanceToCompare = currentNode.distance + distance;\r\n  if (distanceToCompare < targetNode.distance) {\r\n    targetNode.distance = distanceToCompare;\r\n    targetNode.previousNode = currentNode;\r\n  }\r\n}\r\nfunction updateNeighbors(node, grid) {\r\n  let neighbors = getNeighbors(node, grid);\r\n\r\n  for (let neighbor of neighbors) {\r\n    updateNode(node, neighbor);\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getNeighbors(node, grid) {\r\n  let neighbors = [];\r\n  let { col, row } = node;\r\n  //up\r\n  if (row > 0) {\r\n    neighbors.push(grid[row - 1][col]);\r\n  }\r\n  //down\r\n  if (row < grid.length - 1) {\r\n    neighbors.push(grid[row + 1][col]);\r\n  }\r\n  //left\r\n  if (col > 0) {\r\n    neighbors.push(grid[row][col - 1]);\r\n  }\r\n  //right\r\n  if (col < grid[0].length - 1) {\r\n    neighbors.push(grid[row][col + 1]);\r\n  }\r\n\r\n  //diagonals\r\n\r\n  //up-left diagonal\r\n  if (row > 0 && col > 0) {\r\n    neighbors.push(grid[row - 1][col - 1]);\r\n  }\r\n  //down-right diagonal\r\n  if (row < grid.length - 1 && col < grid[0].length - 1) {\r\n    neighbors.push(grid[row + 1][col + 1]);\r\n  }\r\n  //up-right\r\n  if (row > 0 && col < grid[0].length - 1) {\r\n    neighbors.push(grid[row - 1][col + 1]);\r\n  }\r\n  //down-left\r\n  if (row < grid.length - 1 && col > 0) {\r\n    neighbors.push(grid[row + 1][col - 1]);\r\n  }\r\n\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function getDistance(nodeOne, nodeTwo) {\r\n  let currentCoordinates = nodeOne.id.split(\"-\");\r\n  let targetCoordinates = nodeTwo.id.split(\"-\");\r\n  let x1 = parseInt(currentCoordinates[0]);\r\n  let y1 = parseInt(currentCoordinates[1]);\r\n  let x2 = parseInt(targetCoordinates[0]);\r\n  let y2 = parseInt(targetCoordinates[1]);\r\n  //if end point is to the left of start point\r\n  if (x2 < x1) {\r\n    console.log(\"Distance between \" + nodeOne + \" and \" + nodeTwo + \" is 3\");\r\n    return 3;\r\n  }\r\n  //if end point is to the right of start point\r\n  else if (x2 > x1) {\r\n    console.log(\"Distance between \" + nodeOne + \" and \" + nodeTwo + \" is 1\");\r\n    return 1;\r\n  }\r\n  //if end point is up or down of the start point\r\n  if (y2 < y1 || y1 < y2) {\r\n    console.log(\"Distance between \" + nodeOne + \" and \" + nodeTwo + \" is 2\");\r\n    return 2;\r\n  }\r\n  if (x2 < x1 && y1 === y2) {\r\n    if (nodeOne.direction === \"up\") {\r\n      return [1, [\"f\"], \"up\"];\r\n    } else if (nodeOne.direction === \"right\") {\r\n      return [2, [\"l\", \"f\"], \"up\"];\r\n    } else if (nodeOne.direction === \"left\") {\r\n      return [2, [\"r\", \"f\"], \"up\"];\r\n    } else if (nodeOne.direction === \"down\") {\r\n      return [3, [\"r\", \"r\", \"f\"], \"up\"];\r\n    } else if (nodeOne.direction === \"up-right\") {\r\n      return [1.5, null, \"up\"];\r\n    } else if (nodeOne.direction === \"down-right\") {\r\n      return [2.5, null, \"up\"];\r\n    } else if (nodeOne.direction === \"up-left\") {\r\n      return [1.5, null, \"up\"];\r\n    } else if (nodeOne.direction === \"down-left\") {\r\n      return [2.5, null, \"up\"];\r\n    }\r\n  } else if (x2 > x1 && y1 === y2) {\r\n    if (nodeOne.direction === \"up\") {\r\n      return [3, [\"r\", \"r\", \"f\"], \"down\"];\r\n    } else if (nodeOne.direction === \"right\") {\r\n      return [2, [\"r\", \"f\"], \"down\"];\r\n    } else if (nodeOne.direction === \"left\") {\r\n      return [2, [\"l\", \"f\"], \"down\"];\r\n    } else if (nodeOne.direction === \"down\") {\r\n      return [1, [\"f\"], \"down\"];\r\n    } else if (nodeOne.direction === \"up-right\") {\r\n      return [2.5, null, \"down\"];\r\n    } else if (nodeOne.direction === \"down-right\") {\r\n      return [1.5, null, \"down\"];\r\n    } else if (nodeOne.direction === \"up-left\") {\r\n      return [2.5, null, \"down\"];\r\n    } else if (nodeOne.direction === \"down-left\") {\r\n      return [1.5, null, \"down\"];\r\n    }\r\n  }\r\n  if (y2 < y1 && x1 === x2) {\r\n    if (nodeOne.direction === \"up\") {\r\n      return [2, [\"l\", \"f\"], \"left\"];\r\n    } else if (nodeOne.direction === \"right\") {\r\n      return [3, [\"l\", \"l\", \"f\"], \"left\"];\r\n    } else if (nodeOne.direction === \"left\") {\r\n      return [1, [\"f\"], \"left\"];\r\n    } else if (nodeOne.direction === \"down\") {\r\n      return [2, [\"r\", \"f\"], \"left\"];\r\n    } else if (nodeOne.direction === \"up-right\") {\r\n      return [2.5, null, \"left\"];\r\n    } else if (nodeOne.direction === \"down-right\") {\r\n      return [2.5, null, \"left\"];\r\n    } else if (nodeOne.direction === \"up-left\") {\r\n      return [1.5, null, \"left\"];\r\n    } else if (nodeOne.direction === \"down-left\") {\r\n      return [1.5, null, \"left\"];\r\n    }\r\n  } else if (y2 > y1 && x1 === x2) {\r\n    if (nodeOne.direction === \"up\") {\r\n      return [2, [\"r\", \"f\"], \"right\"];\r\n    } else if (nodeOne.direction === \"right\") {\r\n      return [1, [\"f\"], \"right\"];\r\n    } else if (nodeOne.direction === \"left\") {\r\n      return [3, [\"r\", \"r\", \"f\"], \"right\"];\r\n    } else if (nodeOne.direction === \"down\") {\r\n      return [2, [\"l\", \"f\"], \"right\"];\r\n    } else if (nodeOne.direction === \"up-right\") {\r\n      return [1.5, null, \"right\"];\r\n    } else if (nodeOne.direction === \"down-right\") {\r\n      return [1.5, null, \"right\"];\r\n    } else if (nodeOne.direction === \"up-left\") {\r\n      return [2.5, null, \"right\"];\r\n    } else if (nodeOne.direction === \"down-left\") {\r\n      return [2.5, null, \"right\"];\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../Algorithms/dijkstra\";\r\nimport { astar } from \"../Algorithms/astar\";\r\nimport \"../Algorithms/astar\";\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 5 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 5 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, 25 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  visualizeAstar() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAstar(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  animateAstar(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 5 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 5 * i);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <button\r\n          className=\"btn menu_btn\"\r\n          onClick={() => this.visualizeDijkstra()}\r\n        >\r\n          Visualize Dijkstra's Algorithm\r\n        </button>\r\n        <button\r\n          className=\"btn_disabled\"\r\n          onClick={() => this.visualizeAstar()}\r\n          disabled\r\n        >\r\n          Visualize A* Algorithm [in dev]\r\n        </button>\r\n        <button\r\n          className=\"btn menu_btn\"\r\n          onClick={() => window.location.reload(false)}\r\n        >\r\n          Clear Grid\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}